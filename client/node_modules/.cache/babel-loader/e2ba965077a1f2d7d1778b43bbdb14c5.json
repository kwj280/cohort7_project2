{"ast":null,"code":"var _jsxFileName = \"/home/woojae/cohort7_project2/src/components/AutoCompleteInput.js\";\nimport * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst filter = createFilterOptions();\nexport default function FreeSoloCreateOption(value, setValue) {\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    value: value,\n    onChange: (event, newValue) => {\n      if (typeof newValue === 'string') {\n        setValue({\n          title: newValue\n        });\n      } else if (newValue && newValue.inputValue) {\n        // Create a new value from the user input\n        setValue({\n          title: newValue.inputValue\n        });\n      } else {\n        setValue(newValue);\n      }\n    },\n    filterOptions: (options, params) => {\n      const filtered = filter(options, params);\n      const {\n        inputValue\n      } = params; // Suggest the creation of a new value\n\n      const isExisting = options.some(option => inputValue === option.title);\n\n      if (inputValue !== '' && !isExisting) {\n        filtered.push({\n          inputValue,\n          title: `Add \"${inputValue}\"`\n        });\n      }\n\n      return filtered;\n    },\n    selectOnFocus: true,\n    clearOnBlur: true,\n    handleHomeEndKeys: true,\n    id: \"free-solo-with-text-demo\",\n    options: top100Films,\n    getOptionLabel: option => {\n      // Value selected with enter, right from the input\n      if (typeof option === 'string') {\n        return option;\n      } // Add \"xxx\" option created dynamically\n\n\n      if (option.inputValue) {\n        return option.inputValue;\n      } // Regular option\n\n\n      return option.title;\n    },\n    renderOption: (props, option) => /*#__PURE__*/_jsxDEV(\"li\", { ...props,\n      children: option.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 40\n    }, this),\n    sx: {\n      width: 300\n    },\n    freeSolo: true,\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n      label: \"Skills\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n} // Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\n\n_c = FreeSoloCreateOption;\nconst top100Films = ['HTML', 'CSS', 'Javascript', 'Node', 'React', 'MongoDB'];\n\nvar _c;\n\n$RefreshReg$(_c, \"FreeSoloCreateOption\");","map":{"version":3,"sources":["/home/woojae/cohort7_project2/src/components/AutoCompleteInput.js"],"names":["React","TextField","Autocomplete","createFilterOptions","filter","FreeSoloCreateOption","value","setValue","event","newValue","title","inputValue","options","params","filtered","isExisting","some","option","push","top100Films","props","width"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,YAAP,IAAuBC,mBAAvB,QAAkD,4BAAlD;;AAEA,MAAMC,MAAM,GAAGD,mBAAmB,EAAlC;AAEA,eAAe,SAASE,oBAAT,CAA+BC,KAA/B,EAAsCC,QAAtC,EAAgD;AAE7D,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAED,KADT;AAEE,IAAA,QAAQ,EAAE,CAACE,KAAD,EAAQC,QAAR,KAAqB;AAC7B,UAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChCF,QAAAA,QAAQ,CAAC;AACPG,UAAAA,KAAK,EAAED;AADA,SAAD,CAAR;AAGD,OAJD,MAIO,IAAIA,QAAQ,IAAIA,QAAQ,CAACE,UAAzB,EAAqC;AAC1C;AACAJ,QAAAA,QAAQ,CAAC;AACPG,UAAAA,KAAK,EAAED,QAAQ,CAACE;AADT,SAAD,CAAR;AAGD,OALM,MAKA;AACLJ,QAAAA,QAAQ,CAACE,QAAD,CAAR;AACD;AACF,KAfH;AAgBE,IAAA,aAAa,EAAE,CAACG,OAAD,EAAUC,MAAV,KAAqB;AAClC,YAAMC,QAAQ,GAAGV,MAAM,CAACQ,OAAD,EAAUC,MAAV,CAAvB;AAEA,YAAM;AAAEF,QAAAA;AAAF,UAAiBE,MAAvB,CAHkC,CAIlC;;AACA,YAAME,UAAU,GAAGH,OAAO,CAACI,IAAR,CAAcC,MAAD,IAAYN,UAAU,KAAKM,MAAM,CAACP,KAA/C,CAAnB;;AACA,UAAIC,UAAU,KAAK,EAAf,IAAqB,CAACI,UAA1B,EAAsC;AACpCD,QAAAA,QAAQ,CAACI,IAAT,CAAc;AACZP,UAAAA,UADY;AAEZD,UAAAA,KAAK,EAAG,QAAOC,UAAW;AAFd,SAAd;AAID;;AAED,aAAOG,QAAP;AACD,KA9BH;AA+BE,IAAA,aAAa,MA/Bf;AAgCE,IAAA,WAAW,MAhCb;AAiCE,IAAA,iBAAiB,MAjCnB;AAkCE,IAAA,EAAE,EAAC,0BAlCL;AAmCE,IAAA,OAAO,EAAEK,WAnCX;AAoCE,IAAA,cAAc,EAAGF,MAAD,IAAY;AAC1B;AACA,UAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,eAAOA,MAAP;AACD,OAJyB,CAK1B;;;AACA,UAAIA,MAAM,CAACN,UAAX,EAAuB;AACrB,eAAOM,MAAM,CAACN,UAAd;AACD,OARyB,CAS1B;;;AACA,aAAOM,MAAM,CAACP,KAAd;AACD,KA/CH;AAgDE,IAAA,YAAY,EAAE,CAACU,KAAD,EAAQH,MAAR,kBAAmB,mBAAQG,KAAR;AAAA,gBAAgBH,MAAM,CAACP;AAAvB;AAAA;AAAA;AAAA;AAAA,YAhDnC;AAiDE,IAAA,EAAE,EAAE;AAAEW,MAAAA,KAAK,EAAE;AAAT,KAjDN;AAkDE,IAAA,QAAQ,MAlDV;AAmDE,IAAA,WAAW,EAAGR,MAAD,iBACX,QAAC,SAAD,OAAeA,MAAf;AAAuB,MAAA,KAAK,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA;AApDJ;AAAA;AAAA;AAAA;AAAA,UADF;AAyDD,C,CAED;;KA7DwBR,oB;AA8DxB,MAAMc,WAAW,GAAG,CAAC,MAAD,EAAS,KAAT,EAAgB,YAAhB,EAA8B,MAA9B,EAAsC,OAAtC,EAA+C,SAA/C,CAApB","sourcesContent":["import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\n\nconst filter = createFilterOptions();\n\nexport default function FreeSoloCreateOption( value, setValue) {\n\n  return (\n    <Autocomplete\n      value={value}\n      onChange={(event, newValue) => {\n        if (typeof newValue === 'string') {\n          setValue({\n            title: newValue,\n          });\n        } else if (newValue && newValue.inputValue) {\n          // Create a new value from the user input\n          setValue({\n            title: newValue.inputValue,\n          });\n        } else {\n          setValue(newValue);\n        }\n      }}\n      filterOptions={(options, params) => {\n        const filtered = filter(options, params);\n\n        const { inputValue } = params;\n        // Suggest the creation of a new value\n        const isExisting = options.some((option) => inputValue === option.title);\n        if (inputValue !== '' && !isExisting) {\n          filtered.push({\n            inputValue,\n            title: `Add \"${inputValue}\"`,\n          });\n        }\n\n        return filtered;\n      }}\n      selectOnFocus\n      clearOnBlur\n      handleHomeEndKeys\n      id=\"free-solo-with-text-demo\"\n      options={top100Films}\n      getOptionLabel={(option) => {\n        // Value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n        // Add \"xxx\" option created dynamically\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n        // Regular option\n        return option.title;\n      }}\n      renderOption={(props, option) => <li {...props}>{option.title}</li>}\n      sx={{ width: 300 }}\n      freeSolo\n      renderInput={(params) => (\n        <TextField {...params} label=\"Skills\" />\n      )}\n    />\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = ['HTML', 'CSS', 'Javascript', 'Node', 'React', 'MongoDB'\n];"]},"metadata":{},"sourceType":"module"}