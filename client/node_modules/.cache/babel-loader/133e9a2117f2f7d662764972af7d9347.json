{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useId as useId } from '@mui/utils';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses, generateUtilityClass, generateUtilityClasses } from '@mui/base';\nimport Clock from './Clock';\nimport { pipe } from '../internal/pickers/utils';\nimport { useUtils, useNow } from '../internal/pickers/hooks/useUtils';\nimport { getHourNumbers, getMinutesNumbers } from './ClockNumbers';\nimport PickersArrowSwitcher from '../internal/pickers/PickersArrowSwitcher';\nimport { convertValueToMeridiem, createIsAfterIgnoreDatePart } from '../internal/pickers/time-utils';\nimport { useMeridiemMode } from '../internal/pickers/hooks/date-helpers-hooks';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function getClockPickerUtilityClass(slot) {\n  return generateUtilityClass('MuiClockPicker', slot);\n}\nexport var clockPickerClasses = generateUtilityClasses('MuiClockPicker', ['arrowSwitcher']);\n\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var classes = ownerState.classes;\n  var slots = {\n    arrowSwitcher: ['arrowSwitcher']\n  };\n  return composeClasses(slots, getClockPickerUtilityClass, classes);\n};\n\nvar ClockPickerArrowSwitcher = styled(PickersArrowSwitcher, {\n  name: 'MuiClockPicker',\n  slot: 'ArrowSwticher',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.arrowSwitcher;\n  }\n})({\n  position: 'absolute',\n  right: 12,\n  top: 15\n});\n\nvar defaultGetClockLabelText = function defaultGetClockLabelText(view, time, adapter) {\n  return \"Select \".concat(view, \". \").concat(time === null ? 'No time selected' : \"Selected time is \".concat(adapter.format(time, 'fullTime')));\n};\n\nvar defaultGetMinutesClockNumberText = function defaultGetMinutesClockNumberText(minutes) {\n  return \"\".concat(minutes, \" minutes\");\n};\n\nvar defaultGetHoursClockNumberText = function defaultGetHoursClockNumberText(hours) {\n  return \"\".concat(hours, \" hours\");\n};\n\nvar defaultGetSecondsClockNumberText = function defaultGetSecondsClockNumberText(seconds) {\n  return \"\".concat(seconds, \" seconds\");\n};\n/**\n *\n * API:\n *\n * - [ClockPicker API](https://mui.com/api/clock-picker/)\n */\n\n\nfunction ClockPicker(inProps) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiClockPicker'\n  });\n  var _props$ampm = props.ampm,\n      ampm = _props$ampm === void 0 ? false : _props$ampm,\n      _props$ampmInClock = props.ampmInClock,\n      ampmInClock = _props$ampmInClock === void 0 ? false : _props$ampmInClock,\n      autoFocus = props.autoFocus,\n      components = props.components,\n      componentsProps = props.componentsProps,\n      date = props.date,\n      _props$disableIgnorin = props.disableIgnoringDatePartForTimeValidation,\n      disableIgnoringDatePartForTimeValidation = _props$disableIgnorin === void 0 ? false : _props$disableIgnorin,\n      _props$getClockLabelT = props.getClockLabelText,\n      getClockLabelText = _props$getClockLabelT === void 0 ? defaultGetClockLabelText : _props$getClockLabelT,\n      _props$getHoursClockN = props.getHoursClockNumberText,\n      getHoursClockNumberText = _props$getHoursClockN === void 0 ? defaultGetHoursClockNumberText : _props$getHoursClockN,\n      _props$getMinutesCloc = props.getMinutesClockNumberText,\n      getMinutesClockNumberText = _props$getMinutesCloc === void 0 ? defaultGetMinutesClockNumberText : _props$getMinutesCloc,\n      _props$getSecondsCloc = props.getSecondsClockNumberText,\n      getSecondsClockNumberText = _props$getSecondsCloc === void 0 ? defaultGetSecondsClockNumberText : _props$getSecondsCloc,\n      _props$leftArrowButto = props.leftArrowButtonText,\n      leftArrowButtonText = _props$leftArrowButto === void 0 ? 'open previous view' : _props$leftArrowButto,\n      maxTime = props.maxTime,\n      minTime = props.minTime,\n      _props$minutesStep = props.minutesStep,\n      minutesStep = _props$minutesStep === void 0 ? 1 : _props$minutesStep,\n      nextViewAvailable = props.nextViewAvailable,\n      onChange = props.onChange,\n      openNextView = props.openNextView,\n      openPreviousView = props.openPreviousView,\n      previousViewAvailable = props.previousViewAvailable,\n      _props$rightArrowButt = props.rightArrowButtonText,\n      rightArrowButtonText = _props$rightArrowButt === void 0 ? 'open next view' : _props$rightArrowButt,\n      shouldDisableTime = props.shouldDisableTime,\n      showViewSwitcher = props.showViewSwitcher,\n      view = props.view;\n  var now = useNow();\n  var utils = useUtils();\n  var midnight = utils.setSeconds(utils.setMinutes(utils.setHours(now, 0), 0), 0);\n  var dateOrMidnight = date || midnight;\n\n  var _useMeridiemMode = useMeridiemMode(dateOrMidnight, ampm, onChange),\n      meridiemMode = _useMeridiemMode.meridiemMode,\n      handleMeridiemChange = _useMeridiemMode.handleMeridiemChange;\n\n  var isTimeDisabled = React.useCallback(function (rawValue, viewType) {\n    if (date === null) {\n      return false;\n    }\n\n    var validateTimeValue = function validateTimeValue(getRequestedTimePoint) {\n      var isAfterComparingFn = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);\n      return Boolean(minTime && isAfterComparingFn(minTime, getRequestedTimePoint('end')) || maxTime && isAfterComparingFn(getRequestedTimePoint('start'), maxTime) || shouldDisableTime && shouldDisableTime(rawValue, viewType));\n    };\n\n    switch (viewType) {\n      case 'hours':\n        {\n          var hoursWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);\n          return validateTimeValue(function (when) {\n            return pipe(function (currentDate) {\n              return utils.setHours(currentDate, hoursWithMeridiem);\n            }, function (dateWithHours) {\n              return utils.setMinutes(dateWithHours, when === 'start' ? 0 : 59);\n            }, function (dateWithMinutes) {\n              return utils.setSeconds(dateWithMinutes, when === 'start' ? 0 : 59);\n            })(date);\n          });\n        }\n\n      case 'minutes':\n        return validateTimeValue(function (when) {\n          return pipe(function (currentDate) {\n            return utils.setMinutes(currentDate, rawValue);\n          }, function (dateWithMinutes) {\n            return utils.setSeconds(dateWithMinutes, when === 'start' ? 0 : 59);\n          })(date);\n        });\n\n      case 'seconds':\n        return validateTimeValue(function () {\n          return utils.setSeconds(date, rawValue);\n        });\n\n      default:\n        throw new Error('not supported');\n    }\n  }, [ampm, date, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, shouldDisableTime, utils]);\n  var selectedId = useId();\n  var viewProps = React.useMemo(function () {\n    switch (view) {\n      case 'hours':\n        {\n          var handleHoursChange = function handleHoursChange(value, isFinish) {\n            var valueWithMeridiem = convertValueToMeridiem(value, meridiemMode, ampm);\n            onChange(utils.setHours(dateOrMidnight, valueWithMeridiem), isFinish);\n          };\n\n          return {\n            onChange: handleHoursChange,\n            value: utils.getHours(dateOrMidnight),\n            children: getHourNumbers({\n              date: date,\n              utils: utils,\n              ampm: ampm,\n              onChange: handleHoursChange,\n              getClockNumberText: getHoursClockNumberText,\n              isDisabled: function isDisabled(value) {\n                return isTimeDisabled(value, 'hours');\n              },\n              selectedId: selectedId\n            })\n          };\n        }\n\n      case 'minutes':\n        {\n          var minutesValue = utils.getMinutes(dateOrMidnight);\n\n          var handleMinutesChange = function handleMinutesChange(value, isFinish) {\n            onChange(utils.setMinutes(dateOrMidnight, value), isFinish);\n          };\n\n          return {\n            value: minutesValue,\n            onChange: handleMinutesChange,\n            children: getMinutesNumbers({\n              utils: utils,\n              value: minutesValue,\n              onChange: handleMinutesChange,\n              getClockNumberText: getMinutesClockNumberText,\n              isDisabled: function isDisabled(value) {\n                return isTimeDisabled(value, 'minutes');\n              },\n              selectedId: selectedId\n            })\n          };\n        }\n\n      case 'seconds':\n        {\n          var secondsValue = utils.getSeconds(dateOrMidnight);\n\n          var handleSecondsChange = function handleSecondsChange(value, isFinish) {\n            onChange(utils.setSeconds(dateOrMidnight, value), isFinish);\n          };\n\n          return {\n            value: secondsValue,\n            onChange: handleSecondsChange,\n            children: getMinutesNumbers({\n              utils: utils,\n              value: secondsValue,\n              onChange: handleSecondsChange,\n              getClockNumberText: getSecondsClockNumberText,\n              isDisabled: function isDisabled(value) {\n                return isTimeDisabled(value, 'seconds');\n              },\n              selectedId: selectedId\n            })\n          };\n        }\n\n      default:\n        throw new Error('You must provide the type for ClockView');\n    }\n  }, [view, utils, date, ampm, getHoursClockNumberText, getMinutesClockNumberText, getSecondsClockNumberText, meridiemMode, onChange, dateOrMidnight, isTimeDisabled, selectedId]);\n  var ownerState = props;\n  var classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [showViewSwitcher && /*#__PURE__*/_jsx(ClockPickerArrowSwitcher, {\n      className: classes.arrowSwitcher,\n      leftArrowButtonText: leftArrowButtonText,\n      rightArrowButtonText: rightArrowButtonText,\n      components: components,\n      componentsProps: componentsProps,\n      onLeftClick: openPreviousView,\n      onRightClick: openNextView,\n      isLeftDisabled: previousViewAvailable,\n      isRightDisabled: nextViewAvailable,\n      ownerState: ownerState\n    }), /*#__PURE__*/_jsx(Clock, _extends({\n      autoFocus: autoFocus,\n      date: date,\n      ampmInClock: ampmInClock,\n      type: view,\n      ampm: ampm,\n      getClockLabelText: getClockLabelText,\n      minutesStep: minutesStep,\n      isTimeDisabled: isTimeDisabled,\n      meridiemMode: meridiemMode,\n      handleMeridiemChange: handleMeridiemChange,\n      selectedId: selectedId\n    }, viewProps))]\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ClockPicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default false\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * Set to `true` if focus should be moved to clock picker.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Selected date @DateIOType.\n   */\n  date: PropTypes.any,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get clock number aria-text for hours.\n   * @default (hours: string) => `${hours} hours`\n   */\n  getHoursClockNumberText: PropTypes.func,\n\n  /**\n   * Get clock number aria-text for minutes.\n   * @default (minutes: string) => `${minutes} minutes`\n   */\n  getMinutesClockNumberText: PropTypes.func,\n\n  /**\n   * Get clock number aria-text for seconds.\n   * @default (seconds: string) => `${seconds} seconds`\n   */\n  getSecondsClockNumberText: PropTypes.func,\n\n  /**\n   * Left arrow icon aria-label text.\n   * @default 'open previous view'\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * @ignore\n   */\n  nextViewAvailable: PropTypes.bool.isRequired,\n\n  /**\n   * On change callback @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * @ignore\n   */\n  openNextView: PropTypes.func.isRequired,\n\n  /**\n   * @ignore\n   */\n  openPreviousView: PropTypes.func.isRequired,\n\n  /**\n   * @ignore\n   */\n  previousViewAvailable: PropTypes.bool.isRequired,\n\n  /**\n   * Right arrow icon aria-label text.\n   * @default 'open next view'\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  showViewSwitcher: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  view: PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired\n} : void 0;\n/**\n *\n * Demos:\n *\n * - [Time Picker](https://mui.com/components/time-picker/)\n *\n * API:\n *\n * - [ClockPicker API](https://mui.com/api/clock-picker/)\n */\n\nexport default ClockPicker;","map":{"version":3,"sources":["/home/woojae/cohort7_project2/node_modules/@mui/lab/ClockPicker/ClockPicker.js"],"names":["_extends","React","PropTypes","unstable_useId","useId","styled","useThemeProps","unstable_composeClasses","composeClasses","generateUtilityClass","generateUtilityClasses","Clock","pipe","useUtils","useNow","getHourNumbers","getMinutesNumbers","PickersArrowSwitcher","convertValueToMeridiem","createIsAfterIgnoreDatePart","useMeridiemMode","jsx","_jsx","jsxs","_jsxs","getClockPickerUtilityClass","slot","clockPickerClasses","useUtilityClasses","ownerState","classes","slots","arrowSwitcher","ClockPickerArrowSwitcher","name","overridesResolver","props","styles","position","right","top","defaultGetClockLabelText","view","time","adapter","format","defaultGetMinutesClockNumberText","minutes","defaultGetHoursClockNumberText","hours","defaultGetSecondsClockNumberText","seconds","ClockPicker","inProps","ampm","ampmInClock","autoFocus","components","componentsProps","date","disableIgnoringDatePartForTimeValidation","getClockLabelText","getHoursClockNumberText","getMinutesClockNumberText","getSecondsClockNumberText","leftArrowButtonText","maxTime","minTime","minutesStep","nextViewAvailable","onChange","openNextView","openPreviousView","previousViewAvailable","rightArrowButtonText","shouldDisableTime","showViewSwitcher","now","utils","midnight","setSeconds","setMinutes","setHours","dateOrMidnight","meridiemMode","handleMeridiemChange","isTimeDisabled","useCallback","rawValue","viewType","validateTimeValue","getRequestedTimePoint","isAfterComparingFn","Boolean","hoursWithMeridiem","when","currentDate","dateWithHours","dateWithMinutes","Error","selectedId","viewProps","useMemo","handleHoursChange","value","isFinish","valueWithMeridiem","getHours","children","getClockNumberText","isDisabled","minutesValue","getMinutes","handleMinutesChange","secondsValue","getSeconds","handleSecondsChange","Fragment","className","onLeftClick","onRightClick","isLeftDisabled","isRightDisabled","type","process","env","NODE_ENV","propTypes","bool","object","shape","LeftArrowButton","elementType","LeftArrowIcon","RightArrowButton","RightArrowIcon","any","func","string","number","isRequired","oneOf"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useId as useId } from '@mui/utils';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses, generateUtilityClass, generateUtilityClasses } from '@mui/base';\nimport Clock from './Clock';\nimport { pipe } from '../internal/pickers/utils';\nimport { useUtils, useNow } from '../internal/pickers/hooks/useUtils';\nimport { getHourNumbers, getMinutesNumbers } from './ClockNumbers';\nimport PickersArrowSwitcher from '../internal/pickers/PickersArrowSwitcher';\nimport { convertValueToMeridiem, createIsAfterIgnoreDatePart } from '../internal/pickers/time-utils';\nimport { useMeridiemMode } from '../internal/pickers/hooks/date-helpers-hooks';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function getClockPickerUtilityClass(slot) {\n  return generateUtilityClass('MuiClockPicker', slot);\n}\nexport const clockPickerClasses = generateUtilityClasses('MuiClockPicker', ['arrowSwitcher']);\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    arrowSwitcher: ['arrowSwitcher']\n  };\n  return composeClasses(slots, getClockPickerUtilityClass, classes);\n};\n\nconst ClockPickerArrowSwitcher = styled(PickersArrowSwitcher, {\n  name: 'MuiClockPicker',\n  slot: 'ArrowSwticher',\n  overridesResolver: (props, styles) => styles.arrowSwitcher\n})({\n  position: 'absolute',\n  right: 12,\n  top: 15\n});\n\nconst defaultGetClockLabelText = (view, time, adapter) => `Select ${view}. ${time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`}`;\n\nconst defaultGetMinutesClockNumberText = minutes => `${minutes} minutes`;\n\nconst defaultGetHoursClockNumberText = hours => `${hours} hours`;\n\nconst defaultGetSecondsClockNumberText = seconds => `${seconds} seconds`;\n/**\n *\n * API:\n *\n * - [ClockPicker API](https://mui.com/api/clock-picker/)\n */\n\n\nfunction ClockPicker(inProps) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiClockPicker'\n  });\n  const {\n    ampm = false,\n    ampmInClock = false,\n    autoFocus,\n    components,\n    componentsProps,\n    date,\n    disableIgnoringDatePartForTimeValidation = false,\n    getClockLabelText = defaultGetClockLabelText,\n    getHoursClockNumberText = defaultGetHoursClockNumberText,\n    getMinutesClockNumberText = defaultGetMinutesClockNumberText,\n    getSecondsClockNumberText = defaultGetSecondsClockNumberText,\n    leftArrowButtonText = 'open previous view',\n    maxTime,\n    minTime,\n    minutesStep = 1,\n    nextViewAvailable,\n    onChange,\n    openNextView,\n    openPreviousView,\n    previousViewAvailable,\n    rightArrowButtonText = 'open next view',\n    shouldDisableTime,\n    showViewSwitcher,\n    view\n  } = props;\n  const now = useNow();\n  const utils = useUtils();\n  const midnight = utils.setSeconds(utils.setMinutes(utils.setHours(now, 0), 0), 0);\n  const dateOrMidnight = date || midnight;\n  const {\n    meridiemMode,\n    handleMeridiemChange\n  } = useMeridiemMode(dateOrMidnight, ampm, onChange);\n  const isTimeDisabled = React.useCallback((rawValue, viewType) => {\n    if (date === null) {\n      return false;\n    }\n\n    const validateTimeValue = getRequestedTimePoint => {\n      const isAfterComparingFn = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);\n      return Boolean(minTime && isAfterComparingFn(minTime, getRequestedTimePoint('end')) || maxTime && isAfterComparingFn(getRequestedTimePoint('start'), maxTime) || shouldDisableTime && shouldDisableTime(rawValue, viewType));\n    };\n\n    switch (viewType) {\n      case 'hours':\n        {\n          const hoursWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);\n          return validateTimeValue(when => pipe(currentDate => utils.setHours(currentDate, hoursWithMeridiem), dateWithHours => utils.setMinutes(dateWithHours, when === 'start' ? 0 : 59), dateWithMinutes => utils.setSeconds(dateWithMinutes, when === 'start' ? 0 : 59))(date));\n        }\n\n      case 'minutes':\n        return validateTimeValue(when => pipe(currentDate => utils.setMinutes(currentDate, rawValue), dateWithMinutes => utils.setSeconds(dateWithMinutes, when === 'start' ? 0 : 59))(date));\n\n      case 'seconds':\n        return validateTimeValue(() => utils.setSeconds(date, rawValue));\n\n      default:\n        throw new Error('not supported');\n    }\n  }, [ampm, date, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, shouldDisableTime, utils]);\n  const selectedId = useId();\n  const viewProps = React.useMemo(() => {\n    switch (view) {\n      case 'hours':\n        {\n          const handleHoursChange = (value, isFinish) => {\n            const valueWithMeridiem = convertValueToMeridiem(value, meridiemMode, ampm);\n            onChange(utils.setHours(dateOrMidnight, valueWithMeridiem), isFinish);\n          };\n\n          return {\n            onChange: handleHoursChange,\n            value: utils.getHours(dateOrMidnight),\n            children: getHourNumbers({\n              date,\n              utils,\n              ampm,\n              onChange: handleHoursChange,\n              getClockNumberText: getHoursClockNumberText,\n              isDisabled: value => isTimeDisabled(value, 'hours'),\n              selectedId\n            })\n          };\n        }\n\n      case 'minutes':\n        {\n          const minutesValue = utils.getMinutes(dateOrMidnight);\n\n          const handleMinutesChange = (value, isFinish) => {\n            onChange(utils.setMinutes(dateOrMidnight, value), isFinish);\n          };\n\n          return {\n            value: minutesValue,\n            onChange: handleMinutesChange,\n            children: getMinutesNumbers({\n              utils,\n              value: minutesValue,\n              onChange: handleMinutesChange,\n              getClockNumberText: getMinutesClockNumberText,\n              isDisabled: value => isTimeDisabled(value, 'minutes'),\n              selectedId\n            })\n          };\n        }\n\n      case 'seconds':\n        {\n          const secondsValue = utils.getSeconds(dateOrMidnight);\n\n          const handleSecondsChange = (value, isFinish) => {\n            onChange(utils.setSeconds(dateOrMidnight, value), isFinish);\n          };\n\n          return {\n            value: secondsValue,\n            onChange: handleSecondsChange,\n            children: getMinutesNumbers({\n              utils,\n              value: secondsValue,\n              onChange: handleSecondsChange,\n              getClockNumberText: getSecondsClockNumberText,\n              isDisabled: value => isTimeDisabled(value, 'seconds'),\n              selectedId\n            })\n          };\n        }\n\n      default:\n        throw new Error('You must provide the type for ClockView');\n    }\n  }, [view, utils, date, ampm, getHoursClockNumberText, getMinutesClockNumberText, getSecondsClockNumberText, meridiemMode, onChange, dateOrMidnight, isTimeDisabled, selectedId]);\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [showViewSwitcher && /*#__PURE__*/_jsx(ClockPickerArrowSwitcher, {\n      className: classes.arrowSwitcher,\n      leftArrowButtonText: leftArrowButtonText,\n      rightArrowButtonText: rightArrowButtonText,\n      components: components,\n      componentsProps: componentsProps,\n      onLeftClick: openPreviousView,\n      onRightClick: openNextView,\n      isLeftDisabled: previousViewAvailable,\n      isRightDisabled: nextViewAvailable,\n      ownerState: ownerState\n    }), /*#__PURE__*/_jsx(Clock, _extends({\n      autoFocus: autoFocus,\n      date: date,\n      ampmInClock: ampmInClock,\n      type: view,\n      ampm: ampm,\n      getClockLabelText: getClockLabelText,\n      minutesStep: minutesStep,\n      isTimeDisabled: isTimeDisabled,\n      meridiemMode: meridiemMode,\n      handleMeridiemChange: handleMeridiemChange,\n      selectedId: selectedId\n    }, viewProps))]\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ClockPicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default false\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * Set to `true` if focus should be moved to clock picker.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Selected date @DateIOType.\n   */\n  date: PropTypes.any,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get clock number aria-text for hours.\n   * @default (hours: string) => `${hours} hours`\n   */\n  getHoursClockNumberText: PropTypes.func,\n\n  /**\n   * Get clock number aria-text for minutes.\n   * @default (minutes: string) => `${minutes} minutes`\n   */\n  getMinutesClockNumberText: PropTypes.func,\n\n  /**\n   * Get clock number aria-text for seconds.\n   * @default (seconds: string) => `${seconds} seconds`\n   */\n  getSecondsClockNumberText: PropTypes.func,\n\n  /**\n   * Left arrow icon aria-label text.\n   * @default 'open previous view'\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * @ignore\n   */\n  nextViewAvailable: PropTypes.bool.isRequired,\n\n  /**\n   * On change callback @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * @ignore\n   */\n  openNextView: PropTypes.func.isRequired,\n\n  /**\n   * @ignore\n   */\n  openPreviousView: PropTypes.func.isRequired,\n\n  /**\n   * @ignore\n   */\n  previousViewAvailable: PropTypes.bool.isRequired,\n\n  /**\n   * Right arrow icon aria-label text.\n   * @default 'open next view'\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  showViewSwitcher: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  view: PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired\n} : void 0;\n/**\n *\n * Demos:\n *\n * - [Time Picker](https://mui.com/components/time-picker/)\n *\n * API:\n *\n * - [ClockPicker API](https://mui.com/api/clock-picker/)\n */\n\nexport default ClockPicker;"]},"metadata":{},"sourceType":"module"}