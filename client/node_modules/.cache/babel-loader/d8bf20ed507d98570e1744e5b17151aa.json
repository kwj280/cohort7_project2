{"ast":null,"code":"var _jsxFileName = \"/home/woojae/cohort7_project2/src/components/JobForm.js\",\n    _s = $RefreshSig$();\n\nimport { makeStyles } from '@material-ui/core';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport axios from 'axios';\nimport { useState, useEffect } from 'react'; //import {useForm, Controller} from \"react-hook-form\"\n// Style Function\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: theme.spacing(2),\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '500px'\n    },\n    '& .MuiButtonBase-root': {\n      margin: theme.spacing(2)\n    }\n  }\n}));\n\nconst JobForm = _ref => {\n  _s();\n\n  let {\n    handleClose\n  } = _ref;\n  const classes = useStyles(); //  Declaring use state variables for Title textbox\n\n  const [Title, setTitle] = useState(\"\");\n  const [TitleTouched, setTitleTouched] = useState(false);\n  const TitleisValid = Title.trim() !== \"\";\n  const TitleInputisInvalid = !TitleisValid && TitleTouched; // Declaring use state variables for Description textbox\n\n  const [Description, setDescription] = useState(\"\");\n  const [DescriptionTouched, setDescriptionTouched] = useState(false);\n  const DescriptionisValid = Description.trim() !== \"\";\n  const DescriptionInputisInvalid = !DescriptionisValid && DescriptionTouched; // Declaring use state variables Skills textbox\n\n  const [Skills, setSkills] = useState(\"\");\n  const [SkillsTouched, setSkillsTouched] = useState(false);\n  const SkillsisValid = Skills.trim() !== \"\";\n  const SkillsInputisInvalid = !SkillsisValid && SkillsTouched; // Declaring use state variable for Company textbox\n\n  const [Company, setCompany] = useState(\"\");\n  const [CompanyTouched, setCompanyTouched] = useState(false);\n  const CompanyisValid = Company.trim() !== \"\";\n  const CompanyInputisInvalid = !CompanyisValid && CompanyTouched; // Declaring use state variable for Availability textbox\n\n  const [Availability, setAvailability] = useState(\"\");\n  const [AvailabilityTouched, setAvailabilityTouched] = useState(false);\n  const AvailabilityisValid = Availability.trim() !== \"\";\n  const AvailabilityisInvalid = !AvailabilityisValid && AvailabilityTouched; // Declaring use state variable for ExpiryDate Textbox\n\n  const [ExpiryDate, setExpiryDate] = useState(\"\");\n  const [ExpiryDateTouched, setExpiryDateTouched] = useState(false);\n  const ExpiryDateisValid = ExpiryDate.trim() !== \"\";\n  const ExpiryDateisInvalid = !ExpiryDateisValid && ExpiryDateTouched; // Declaring use state variables for Link Textbox\n\n  const [Link, setlink] = useState(\"\");\n  const [LinkisTouched, setlinkTouched] = useState(false);\n  const LinkisValid = Link.trim() !== \"\";\n  const LinkisInvalid = !LinkisValid && LinkisTouched; // Function to perform when text box is selected\n\n  const onBlur = (event, setter) => {\n    setter(true);\n  }; // Function to perform when text box is used\n\n\n  const onInputUpdate = (event, setter) => {\n    let updatedValue = event.target.value;\n    setter(updatedValue);\n  }; // Function to reset form after clicking submit\n\n\n  const reset = () => {\n    // Reset Title\n    setTitle(\"\");\n    setTitleTouched(false); // Reset Description\n\n    setDescription(\"\");\n    setDescriptionTouched(false); //Reset Skills\n\n    setSkills(\"\");\n    setSkillsTouched(false); //Reset Company\n\n    setCompany(\"\");\n    setCompanyTouched(false); //Reset Availability\n\n    setAvailability(\"\");\n    setAvailabilityTouched(false); //Reset Expiry Date\n\n    setExpiryDate(\"\");\n    setExpiryDateTouched(false); //Reset Link\n\n    setlink(\"\");\n    setlinkTouched(false);\n  }; // Check to see the form has all the required fields before submitting\n\n\n  let formIsValid = false;\n\n  if (TitleisValid && DescriptionisValid && SkillsisValid && CompanyisValid && AvailabilityisValid && ExpiryDateisValid && LinkisValid) {\n    formIsValid = true;\n  }\n\n  console.log(formIsValid); // Post data to the following endpoint '/job/submit' using axios instead of fetch\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    axios.post('/job/post_jobs', {\n      Title,\n      Description,\n      Skills,\n      Company,\n      Availability,\n      ExpiryDate,\n      Link\n    }).then(function (response) {\n      console.log(response.data);\n    });\n    reset();\n  }; // const JobPost = ({setSelectedJobPost}) => {\n  //   const [jobPost, setJobPost] = useState([])\n  //   useEffect(() => {\n  //     async function fetchData() {\n  //       // console.log('Fetching superhero data!')\n  //       let fetchResult = await fetch(\"http://localhost:27017/\")\n  //       let superheroList = await fetchResult.json()\n  //       setSuperheroes(superheroList)\n  //     }\n  //     fetchData()\n  //   }, [])\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.root,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Title\",\n        variant: \"outlined\",\n        value: Title,\n        onBlur: event => onBlur(event, setTitleTouched),\n        onChange: event => onInputUpdate(event, setTitle),\n        helperText: TitleInputisInvalid ? \"Enter Title\" : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Description\",\n        variant: \"outlined\",\n        value: Description,\n        multiline: true,\n        rows: 5,\n        maxrows: 10,\n        onBlur: event => onBlur(event, setDescriptionTouched),\n        onChange: event => onInputUpdate(event, setDescription),\n        helperText: DescriptionInputisInvalid ? \"Enter Description\" : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Skills\",\n        variant: \"outlined\",\n        value: Skills,\n        onBlur: event => onBlur(event, setSkillsTouched),\n        onChange: event => onInputUpdate(event, setSkills),\n        helperText: SkillsInputisInvalid ? \"Enter Skills\" : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Company\",\n        variant: \"outlined\",\n        value: Company,\n        onBlur: event => onBlur(event, setCompanyTouched),\n        onChange: event => onInputUpdate(event, setCompany),\n        helperText: CompanyInputisInvalid ? \"Enter Company\" : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Availability\",\n        variant: \"outlined\",\n        value: Availability,\n        onBlur: event => onBlur(event, setAvailabilityTouched),\n        onChange: event => onInputUpdate(event, setAvailability),\n        helperText: AvailabilityisInvalid ? \"Enter Availability\" : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Expiry Date\",\n        variant: \"outlined\",\n        value: ExpiryDate,\n        onBlur: event => onBlur(event, setExpiryDateTouched),\n        onChange: event => onInputUpdate(event, setExpiryDate),\n        helperText: ExpiryDateisInvalid ? \"Enter Expiry Date\" : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Link\",\n        variant: \"outlined\",\n        value: Link,\n        onBlur: event => onBlur(event, setlinkTouched),\n        onChange: event => onInputUpdate(event, setlink),\n        helperText: LinkisInvalid ? \"Enter Link\" : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: reset,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSubmit,\n          type: \"Submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          disabled: !formIsValid,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(JobForm, \"sq9EcRjkb8ThbrBbEDKarw1buz4=\", false, function () {\n  return [useStyles];\n});\n\n_c = JobForm;\nexport default JobForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobForm\");","map":{"version":3,"sources":["/home/woojae/cohort7_project2/src/components/JobForm.js"],"names":["makeStyles","TextField","Button","axios","useState","useEffect","useStyles","theme","root","display","flexDirection","justifyContent","alignItems","padding","spacing","margin","width","JobForm","handleClose","classes","Title","setTitle","TitleTouched","setTitleTouched","TitleisValid","trim","TitleInputisInvalid","Description","setDescription","DescriptionTouched","setDescriptionTouched","DescriptionisValid","DescriptionInputisInvalid","Skills","setSkills","SkillsTouched","setSkillsTouched","SkillsisValid","SkillsInputisInvalid","Company","setCompany","CompanyTouched","setCompanyTouched","CompanyisValid","CompanyInputisInvalid","Availability","setAvailability","AvailabilityTouched","setAvailabilityTouched","AvailabilityisValid","AvailabilityisInvalid","ExpiryDate","setExpiryDate","ExpiryDateTouched","setExpiryDateTouched","ExpiryDateisValid","ExpiryDateisInvalid","Link","setlink","LinkisTouched","setlinkTouched","LinkisValid","LinkisInvalid","onBlur","event","setter","onInputUpdate","updatedValue","target","value","reset","formIsValid","console","log","handleSubmit","e","preventDefault","post","then","response","data"],"mappings":"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","sourcesContent":["import { makeStyles} from '@material-ui/core';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport axios from 'axios'\nimport {useState, useEffect} from 'react'\n//import {useForm, Controller} from \"react-hook-form\"\n\n// Style Function\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex', \n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: theme.spacing(2),\n\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '500px',\n    },\n    '& .MuiButtonBase-root': {\n      margin: theme.spacing(2),\n    },\n  },\n}));\n\n\nconst JobForm = ({ handleClose }) => {\n  const classes = useStyles();\n\n  //  Declaring use state variables for Title textbox\n  const [Title, setTitle] = useState(\"\");\n  const [TitleTouched, setTitleTouched] = useState(false);\n  const TitleisValid = Title.trim() !== \"\";\n  const TitleInputisInvalid = !TitleisValid && TitleTouched;\n\n  // Declaring use state variables for Description textbox\n  const [Description, setDescription] = useState(\"\");\n  const [DescriptionTouched, setDescriptionTouched] = useState(false);\n  const DescriptionisValid = Description.trim() !== \"\";\n  const DescriptionInputisInvalid = !DescriptionisValid && DescriptionTouched;\n\n  // Declaring use state variables Skills textbox\n  const [Skills, setSkills] = useState(\"\");\n  const [SkillsTouched, setSkillsTouched] = useState(false);\n  const SkillsisValid = Skills.trim() !== \"\";\n  const SkillsInputisInvalid = !SkillsisValid && SkillsTouched;\n\n  // Declaring use state variable for Company textbox\n  const [Company, setCompany] = useState(\"\");\n  const [CompanyTouched, setCompanyTouched] = useState(false);\n  const CompanyisValid = Company.trim() !== \"\";\n  const CompanyInputisInvalid = !CompanyisValid && CompanyTouched;\n\n  // Declaring use state variable for Availability textbox\n  const [Availability, setAvailability] = useState(\"\")\n  const [AvailabilityTouched, setAvailabilityTouched] = useState(false)\n  const AvailabilityisValid = Availability.trim() !== \"\";\n  const AvailabilityisInvalid = !AvailabilityisValid && AvailabilityTouched;\n\n  // Declaring use state variable for ExpiryDate Textbox\n  const [ExpiryDate, setExpiryDate] = useState(\"\")\n  const [ExpiryDateTouched, setExpiryDateTouched] = useState(false)\n  const ExpiryDateisValid = ExpiryDate.trim() !== \"\";\n  const ExpiryDateisInvalid = !ExpiryDateisValid && ExpiryDateTouched;\n\n  // Declaring use state variables for Link Textbox\n  const [Link, setlink] = useState(\"\");\n  const [LinkisTouched, setlinkTouched] = useState(false);\n  const LinkisValid = Link.trim() !== \"\";\n  const LinkisInvalid = !LinkisValid && LinkisTouched;\n\n\n\n  // Function to perform when text box is selected\n  const onBlur = (event, setter) => {\n    setter(true);\n  }\n    \n  // Function to perform when text box is used\n  const onInputUpdate = (event, setter) => {\n    let updatedValue = event.target.value\n    setter(updatedValue)\n  }\n  // Function to reset form after clicking submit\n  const reset = () => {\n    // Reset Title\n    setTitle(\"\");\n    setTitleTouched(false);\n    // Reset Description\n    setDescription(\"\");\n    setDescriptionTouched(false);\n    //Reset Skills\n    setSkills(\"\");\n    setSkillsTouched(false);\n    //Reset Company\n    setCompany(\"\");\n    setCompanyTouched(false);\n    //Reset Availability\n    setAvailability(\"\");\n    setAvailabilityTouched(false);\n    //Reset Expiry Date\n    setExpiryDate(\"\");\n    setExpiryDateTouched(false);\n    //Reset Link\n    setlink(\"\");\n    setlinkTouched(false);\n  }\n\n  // Check to see the form has all the required fields before submitting\n  let formIsValid = false\n  if (TitleisValid && DescriptionisValid && SkillsisValid && CompanyisValid && AvailabilityisValid && ExpiryDateisValid && LinkisValid) {\n    formIsValid = true\n  }\n\n  console.log(formIsValid)\n\n  // Post data to the following endpoint '/job/submit' using axios instead of fetch\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    axios.post('/job/post_jobs', {\n      Title, Description, Skills, Company, Availability, ExpiryDate, Link\n    }).then(function(response) {\n    console.log(response.data);\n     });\n    reset()\n  };\n  \n  // const JobPost = ({setSelectedJobPost}) => {\n  //   const [jobPost, setJobPost] = useState([])\n  //   useEffect(() => {\n  //     async function fetchData() {\n  //       // console.log('Fetching superhero data!')\n  //       let fetchResult = await fetch(\"http://localhost:27017/\")\n  //       let superheroList = await fetchResult.json()\n  //       setSuperheroes(superheroList)\n  //     }\n  //     fetchData()\n  //   }, [])\n\n  return (\n    <>\n      <form className={classes.root} onSubmit={handleSubmit}>\n        <TextField\n          label=\"Title\"\n          variant=\"outlined\"\n          value={Title}\n          onBlur={(event) => onBlur(event, setTitleTouched)}\n          onChange={(event) => onInputUpdate(event, setTitle)}\n          helperText={TitleInputisInvalid ? \"Enter Title\" : null}\n        />\n        <TextField\n          label=\"Description\"\n          variant=\"outlined\"\n          value={Description}\n          multiline\n          rows={5}\n          maxrows={10}\n          onBlur={(event) => onBlur(event, setDescriptionTouched)}\n          onChange={(event) => onInputUpdate(event, setDescription)}\n          helperText={DescriptionInputisInvalid ? \"Enter Description\" : null}\n        />\n        <TextField\n          label=\"Skills\"\n          variant=\"outlined\"\n          value={Skills}\n          onBlur={(event) => onBlur(event, setSkillsTouched)}\n          onChange={(event) => onInputUpdate(event, setSkills)}\n          helperText={SkillsInputisInvalid ? \"Enter Skills\" : null}\n        />\n        <TextField\n          label=\"Company\"\n          variant=\"outlined\"\n          value={Company}\n          onBlur={(event) => onBlur(event, setCompanyTouched)}\n          onChange={(event) => onInputUpdate(event, setCompany)}\n          helperText={CompanyInputisInvalid ? \"Enter Company\" : null}\n        />\n        <TextField\n          label=\"Availability\"\n          variant=\"outlined\"\n          value={Availability}\n          onBlur={(event) => onBlur(event, setAvailabilityTouched)}\n          onChange={(event) => onInputUpdate(event, setAvailability)}\n          helperText={AvailabilityisInvalid ? \"Enter Availability\" : null}\n        />\n        <TextField\n          label=\"Expiry Date\"\n          variant=\"outlined\"\n          value={ExpiryDate}\n          onBlur={(event) => onBlur(event, setExpiryDateTouched)}\n          onChange={(event) => onInputUpdate(event, setExpiryDate)}\n          helperText={ExpiryDateisInvalid ? \"Enter Expiry Date\" : null}\n        />\n        <TextField\n          label=\"Link\"\n          variant=\"outlined\"\n          value={Link}\n          onBlur={(event) => onBlur(event, setlinkTouched)}\n          onChange={(event) => onInputUpdate(event, setlink)}\n          helperText={LinkisInvalid ? \"Enter Link\" : null}\n        />\n        <div>\n          <Button variant=\"contained\" color='secondary' onClick={reset}>\n            Cancel\n          </Button>\n          <Button onClick={handleSubmit} type=\"Submit\" variant=\"contained\" color=\"primary\" disabled={!formIsValid}>\n            Submit\n          </Button>\n        </div>\n      </form>\n    </>\n\n  );\n} \n \n    \n     \n  export default JobForm"]},"metadata":{},"sourceType":"module"}