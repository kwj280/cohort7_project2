{"ast":null,"code":"import _objectSpread from\"/home/woojae/cohort7_project2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import*as React from'react';import TextField from'@mui/material/TextField';import Autocomplete,{createFilterOptions}from'@mui/material/Autocomplete';import{jsx as _jsx}from\"react/jsx-runtime\";var filter=createFilterOptions();export default function FreeSoloCreateOption(_ref){var selectLabel=_ref.selectLabel,value=_ref.value,setValue=_ref.setValue,buttonRef=_ref.buttonRef,optionList=_ref.optionList;return/*#__PURE__*/_jsx(Autocomplete,{value:value,fullWidth:true,onChange:function onChange(event,newValue){setValue(newValue);},onInputChange:function onInputChange(event){if(event)setValue(event.target.value);},filterOptions:function filterOptions(options,params){var filtered=filter(options,params);var inputValue=params.inputValue;// Suggest the creation of a new value\nreturn filtered;},selectOnFocus:true,clearOnBlur:true,handleHomeEndKeys:true,id:\"autoComplete-\".concat(selectLabel),options:optionList,getOptionLabel:function getOptionLabel(option){// Value selected with enter, right from the input\nreturn option;},renderOption:function renderOption(props,option){return/*#__PURE__*/_jsx(\"li\",_objectSpread(_objectSpread({},props),{},{children:option}));},freeSolo:true,renderInput:function renderInput(params){return/*#__PURE__*/_jsx(TextField,_objectSpread(_objectSpread({},params),{},{label:selectLabel,onKeyDown:function onKeyDown(e){if(e.code==='Enter'&&e.target.value)buttonRef.current.click();}}));}});}","map":{"version":3,"sources":["/home/woojae/cohort7_project2/src/components/AutoCompleteInput.js"],"names":["React","TextField","Autocomplete","createFilterOptions","filter","FreeSoloCreateOption","selectLabel","value","setValue","buttonRef","optionList","event","newValue","target","options","params","filtered","inputValue","option","props","e","code","current","click"],"mappings":"mJAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CACA,MAAOC,CAAAA,YAAP,EAAuBC,mBAAvB,KAAkD,4BAAlD,C,2CAEA,GAAMC,CAAAA,MAAM,CAAGD,mBAAmB,EAAlC,CAEA,cAAe,SAASE,CAAAA,oBAAT,MAAqF,IAAtDC,CAAAA,WAAsD,MAAtDA,WAAsD,CAAzCC,KAAyC,MAAzCA,KAAyC,CAAlCC,QAAkC,MAAlCA,QAAkC,CAAxBC,SAAwB,MAAxBA,SAAwB,CAAbC,UAAa,MAAbA,UAAa,CAElG,mBACE,KAAC,YAAD,EACE,KAAK,CAAEH,KADT,CAEE,SAAS,KAFX,CAGE,QAAQ,CAAE,kBAACI,KAAD,CAAQC,QAAR,CAAqB,CAC7BJ,QAAQ,CAACI,QAAD,CAAR,CACD,CALH,CAME,aAAa,CAAE,uBAACD,KAAD,CAAS,CACtB,GAAGA,KAAH,CACEH,QAAQ,CAACG,KAAK,CAACE,MAAN,CAAaN,KAAd,CAAR,CACH,CATH,CAUE,aAAa,CAAE,uBAACO,OAAD,CAAUC,MAAV,CAAqB,CAClC,GAAMC,CAAAA,QAAQ,CAAGZ,MAAM,CAACU,OAAD,CAAUC,MAAV,CAAvB,CAEA,GAAQE,CAAAA,UAAR,CAAuBF,MAAvB,CAAQE,UAAR,CACA;AACA,MAAOD,CAAAA,QAAP,CACD,CAhBH,CAiBE,aAAa,KAjBf,CAkBE,WAAW,KAlBb,CAmBE,iBAAiB,KAnBnB,CAoBE,EAAE,wBAAkBV,WAAlB,CApBJ,CAqBE,OAAO,CAAEI,UArBX,CAsBE,cAAc,CAAE,wBAACQ,MAAD,CAAY,CAC1B;AACA,MAAOA,CAAAA,MAAP,CACD,CAzBH,CA0BE,YAAY,CAAE,sBAACC,KAAD,CAAQD,MAAR,qBAAmB,yCAAQC,KAAR,eAAgBD,MAAhB,GAAnB,EA1BhB,CA2BE,QAAQ,KA3BV,CA4BE,WAAW,CAAE,qBAACH,MAAD,qBACX,KAAC,SAAD,gCAAeA,MAAf,MAAuB,KAAK,CAAET,WAA9B,CACE,SAAS,CAAI,mBAACc,CAAD,CAAK,CAChB,GAAIA,CAAC,CAACC,IAAF,GAAW,OAAX,EAAsBD,CAAC,CAACP,MAAF,CAASN,KAAnC,CACEE,SAAS,CAACa,OAAV,CAAkBC,KAAlB,GACH,CAJH,GADW,EA5Bf,EADF,CAuCD","sourcesContent":["import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\n\nconst filter = createFilterOptions();\n\nexport default function FreeSoloCreateOption({selectLabel, value, setValue, buttonRef, optionList}) {\n\n  return (\n    <Autocomplete\n      value={value}\n      fullWidth\n      onChange={(event, newValue) => {\n        setValue(newValue);\n      }}\n      onInputChange={(event)=>{\n        if(event)\n          setValue(event.target.value)\n      }}\n      filterOptions={(options, params) => {\n        const filtered = filter(options, params);\n\n        const { inputValue } = params;\n        // Suggest the creation of a new value\n        return filtered;\n      }}\n      selectOnFocus\n      clearOnBlur\n      handleHomeEndKeys\n      id={`autoComplete-${selectLabel}`}\n      options={optionList}\n      getOptionLabel={(option) => {\n        // Value selected with enter, right from the input\n        return option;\n      }}\n      renderOption={(props, option) => <li {...props}>{option}</li>}\n      freeSolo\n      renderInput={(params) => (\n        <TextField {...params} label={selectLabel} \n          onKeyDown = {(e)=>{\n            if (e.code === 'Enter' && e.target.value)\n              buttonRef.current.click()\n          }}\n        />\n      )}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}